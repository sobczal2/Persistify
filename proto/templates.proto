syntax = "proto3";
package Persistify.Services;

message AnalyzerDto {
   oneof subtype {
      FullAnalyzerDto FullAnalyzerDto = 1;
      PresetNameAnalyzerDto PresetNameAnalyzerDto = 2;
   }
}
message BinaryFieldDto {
}
message BoolFieldDto {
   bool Index = 3;
}
message CreateTemplateRequest {
   string TemplateName = 1;
   repeated FieldDto Fields = 2;
}
message CreateTemplateResponse {
}
message DateTimeFieldDto {
   bool Index = 3;
}
message DeleteTemplateRequest {
   string TemplateName = 1;
}
message DeleteTemplateResponse {
}
message ExistsTemplateRequest {
   string TemplateName = 1;
}
message ExistsTemplateResponse {
   bool Exists = 1;
}
message FieldDto {
   string Name = 1;
   bool Required = 2;
   oneof subtype {
      BoolFieldDto BoolFieldDto = 100;
      NumberFieldDto NumberFieldDto = 101;
      TextFieldDto TextFieldDto = 102;
      DateTimeFieldDto DateTimeFieldDto = 103;
      BinaryFieldDto BinaryFieldDto = 104;
   }
}
message FullAnalyzerDto {
   repeated string CharacterFilterNames = 1;
   repeated string CharacterSetNames = 2;
   string TokenizerName = 3;
   repeated string TokenFilterNames = 4;
}
message GetTemplateRequest {
   string TemplateName = 1;
}
message GetTemplateResponse {
   TemplateDto TemplateDto = 1;
}
message ListTemplatesRequest {
   PaginationDto PaginationDto = 1;
}
message ListTemplatesResponse {
   repeated TemplateDto TemplateDtos = 1;
   int32 TotalCount = 2;
}
message NumberFieldDto {
   bool Index = 3;
}
message PaginationDto {
   int32 PageNumber = 1;
   int32 PageSize = 2;
}
message PresetNameAnalyzerDto {
   string PresetName = 1;
}
message TemplateDto {
   string Name = 1;
   repeated FieldDto Fields = 2;
}
message TextFieldDto {
   bool IndexText = 3;
   bool IndexFullText = 4;
   AnalyzerDto AnalyzerDto = 5;
}
service TemplateService {
   rpc CreateTemplate (CreateTemplateRequest) returns (CreateTemplateResponse);
   rpc DeleteTemplate (DeleteTemplateRequest) returns (DeleteTemplateResponse);
   rpc ExistsTemplate (ExistsTemplateRequest) returns (ExistsTemplateResponse);
   rpc GetTemplate (GetTemplateRequest) returns (GetTemplateResponse);
   rpc ListTemplates (ListTemplatesRequest) returns (ListTemplatesResponse);
}
